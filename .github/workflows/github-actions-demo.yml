name: Generate Test Matrix

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}  # Declare output for the job
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'  # Specify the Ruby version you need

    - name: Install dependencies
      run: |
        gem install bundler
        bundle install
        
    - name: Generate matrix and spec_matrix from metadata
      run: |
        # Capture matrix output, ensuring only valid JSON is written to matrix.json
        bundle exec matrix_from_metadata_v3 \
          --platform-exclude 'RedHat-(7|8|9)' \
          --platform-exclude 'SLES-(12|15)' \
          --platform-exclude 'Windows-(10|2012 R2|2016|2019)' \
          --output github 2> warnings.log | tee raw_matrix.json
    
        # Filter out any non-JSON content and extract valid JSON into matrix.json
        cat raw_matrix.json | jq '.' > matrix.json || { echo "Error: Invalid JSON output"; cat warnings.log; exit 1; }
    
        # Extract spec_matrix if it exists
        if jq -e '.spec_matrix' matrix.json > /dev/null 2>&1; then
          echo "Extracting spec_matrix from matrix.json"
          jq '{spec_matrix: .spec_matrix}' matrix.json > spec_matrix.json
          jq 'del(.spec_matrix)' matrix.json > temp_matrix.json && mv temp_matrix.json matrix.json
        fi
    
    - name: Debugging Print the contents of matrix.json and spec_matrix.json for inspection
      run: |
        echo "Printing matrix.json content:"
        cat matrix.json
        if [ -f spec_matrix.json ]; then
          echo "Printing spec_matrix.json content:"
          cat spec_matrix.json
        fi
        
    - name: Set the matrix output
      id: set-matrix
      run: |
        # Debugging: Print the contents of matrix.json for inspection
        echo "Printing matrix.json content:"
        cat matrix.json
        
        # Check if the file exists and is not empty
        if [ ! -s matrix.json ]; then
          echo "Error: matrix.json is empty or does not exist."
          exit 1
        fi
        
        # Validate JSON structure
        if ! jq empty matrix.json; then
          echo "Error: matrix.json contains invalid JSON."
          exit 1
        fi
        
        # Properly convert JSON to string using jq
        matrix=$(jq -c . matrix.json)
        echo "matrix=$matrix" >> $GITHUB_OUTPUT
    
  validate-matrix:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Validate matrix.json
      run: |
        if [ ! -s matrix.json ]; then
          echo "Error: matrix.json is empty or does not exist."
          exit 1
        fi
        if ! jq empty matrix.json; then
          echo "Error: matrix.json is not valid JSON."
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  use-matrix:
    needs: [build, validate-matrix]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build.outputs.matrix) }}
    steps:
    - uses: actions/checkout@v3

    - name: Use Matrix
      run: echo "Running on ${{ matrix.label }}"
